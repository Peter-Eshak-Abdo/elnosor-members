#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ì–°–ü–ö 32 —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
"""

import os
import sys
import argparse
from pathlib import Path


def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ì–°–ü–ö 32...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)

    print(f"‚úÖ Python {sys.version.split()[0]}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ['main.py', 'main.kv', 'database.py', 'search.py']
    for file in required_files:
        if not os.path.exists(file):
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: {file}")
            sys.exit(1)

    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")


def run_app():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ì–°–ü–ö 32...")
    try:
        from main import GSPK32App
        GSPK32App().run()
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        os.system("python test_gspk32.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def run_import():
    """–ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üì• –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        os.system("python import_participants_fixed.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")


def create_sample_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ JSON —Ñ–∞–π–ª–∞
    sample_json = {
        "id": "SAMPLE001",
        "name": "–ü—Ä–∏–º–µ—Ä –£—á–∞—Å—Ç–Ω–∏–∫–∞",
        "address": "–≥. –ü—Ä–∏–º–µ—Ä–Ω—ã–π, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1",
        "phone": "+7 (123) 456-78-90",
        "additional": "–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö",
        "details": "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
    }

    try:
        with open('sample_participant.json', 'w', encoding='utf-8') as f:
            import json
            json.dump(sample_json, f, ensure_ascii=False, indent=2)
        print("‚úÖ –°–æ–∑–¥–∞–Ω sample_participant.json")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {e}")


def show_help():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = """
–ì–°–ü–ö 32 - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã:
  app         - –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  test        - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  import      - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  setup       - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  sample      - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run_gspk32.py app
  python run_gspk32.py test
  python run_gspk32.py import
"""
    print(help_text)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–ì–°–ü–ö 32 - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏',
        add_help=False
    )

    parser.add_argument(
        'command',
        nargs='?',
        default='app',
        choices=['app', 'test', 'import', 'setup', 'sample', 'help'],
        help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )

    parser.add_argument(
        '--debug',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏'
    )

    args = parser.parse_args()

    # –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
    if args.debug:
        os.environ['KIVY_LOG_LEVEL'] = 'debug'
        print("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    if args.command == 'app':
        setup_environment()
        run_app()
    elif args.command == 'test':
        run_tests()
    elif args.command == 'import':
        run_import()
    elif args.command == 'setup':
        setup_environment()
    elif args.command == 'sample':
        create_sample_data()
    elif args.command == 'help':
        show_help()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
        show_help()


if __name__ == '__main__':
    main()
