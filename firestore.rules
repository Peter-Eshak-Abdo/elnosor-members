rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - used for role management only
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null &&
        request.auth.token.role == 'admin';

      // Push subscription subcollection
      match /pushSubscription/{subscriptionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Members collection - user profiles
    match /members/{memberId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
        (request.auth.token.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         request.auth.uid == memberId);
      allow update: if request.auth != null &&
        (request.auth.token.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         request.auth.uid == memberId);
    }

    // Admins collection - admin profiles
    match /admins/{adminId} {
      // Allow users to read their own admin profile if they have admin role in users collection
      allow read: if request.auth != null && (
        request.auth.token.role == 'admin' ||
        (request.auth.uid == adminId && exists(/databases/$(database)/documents/users/$(adminId)))
      );
      allow create: if request.auth != null &&
        request.auth.token.role == 'admin';
      allow update: if request.auth != null &&
        (request.auth.token.role == 'admin' || request.auth.uid == adminId);
      allow delete: if request.auth != null &&
        request.auth.token.role == 'admin';
    }

    // Attendance logs
    match /attendance/{logId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
        request.resource.data.recordedBy == request.auth.uid;
      allow update: if request.auth != null &&
        resource.data.recordedBy == request.auth.uid;
    }

    // Meetings
    match /meetings/{meetingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        request.auth.token.role == 'admin';
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (request.auth.token.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Posts
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow update: if request.auth != null &&
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments']) ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         resource.data.authorId == request.auth.uid);
      allow delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Daily quotes
    match /dailyQuotes/{quoteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        request.auth.token.role == 'admin';
    }

    // Notification templates
    match /notificationTemplates/{templateId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (request.auth.token.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Notification schedules
    match /notificationSchedules/{scheduleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (request.auth.token.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // User settings
    match /user_settings/{userId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == userId;
    }
  }
}
